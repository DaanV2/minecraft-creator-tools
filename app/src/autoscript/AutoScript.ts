import IAutoScriptData from "./IAutoScriptData.js";
import AutoScriptGroup from "./AutoScriptGroup";
import Test from "../gameTest/Test";
import Location from "./../minecraft/Location";
import BlockLocation from "./../minecraft/BlockLocation";
import AutoScriptAction from "./AutoScriptAction";
import Utilities from "../core/Utilities";

export const AUTOGENERATED_WHOLEFILE_JS_SEPARATOR =
  "// ===== AUTOGENERATED FILE ===== CONTENT WITHIN THIS FILE WILL BE WIPED AND UPDATED WHEN USED IN TOOLING";

export const AUTOGENERATED_WHOLEFILE_MCFUNCTION_SEPARATOR =
  "# ===== AUTOGENERATED FILE ===== CONTENT WITHIN THIS FILE WILL BE WIPED AND UPDATED WHEN USED IN TOOLING";

export default class AutoScript extends AutoScriptGroup {
  scriptData: IAutoScriptData;
  _test: Test | undefined;
  _locationRoot: Location | undefined;

  get locationRoot() {
    return this._locationRoot;
  }

  set locationRoot(newRoot: Location | undefined) {
    this._locationRoot = newRoot;
  }

  absolutizeLocation(location: Location) {
    if (!this.locationRoot) {
      return location;
    }

    return new Location(
      this.locationRoot.x + location.x,
      this.locationRoot.y + location.y,
      this.locationRoot.z + location.z
    );
  }

  absolutizeBlockLocation(location: BlockLocation) {
    if (!this.locationRoot) {
      return location;
    }

    return new BlockLocation(
      Math.round(this.locationRoot.x + location.x),
      Math.round(this.locationRoot.y + location.y),
      Math.round(this.locationRoot.z + location.z)
    );
  }

  relativizeLocation(location: Location) {
    if (!this.locationRoot) {
      return location;
    }

    return new Location(
      location.x - this.locationRoot.x,
      location.y - this.locationRoot.y,
      location.z - this.locationRoot.z
    );
  }

  relativizeBlockLocation(location: BlockLocation) {
    if (!this.locationRoot) {
      return location;
    }

    return new BlockLocation(
      Math.round(location.x - this.locationRoot.x),
      Math.round(location.y - this.locationRoot.y),
      Math.round(location.z - this.locationRoot.z)
    );
  }

  addAction(action: AutoScriptAction) {
    this.actions.push(action);
  }
  get test() {
    return this._test;
  }

  get name() {
    return this.scriptData.name;
  }

  set name(newValue: string) {
    this.scriptData.name = newValue;
  }

  constructor(data: IAutoScriptData) {
    super(data);
    this.scriptData = data;
    this.script = this;
  }

  generateJavaScript(): string {
    const lines: string[] = [];

    this.addJavaScriptLines(lines);

    return lines.join("\n");
  }

  generateMCFunction() {
    const lines = this.generateCommandLines();

    return AUTOGENERATED_WHOLEFILE_MCFUNCTION_SEPARATOR + "\n" + lines.join("\n");
  }

  generateCommandLines(): string[] {
    const lines: string[] = [];

    this.addCommandLines(lines);

    return lines;
  }

  generateGameTestJavaScript(groupName: string, nameSuffix: string, structureName: string) {
    const lines: string[] = [];

    let name = this.name;

    if (nameSuffix) {
      name += nameSuffix;
    }

    name = Utilities.getSimpleString(name);
    groupName = Utilities.getSimpleString(groupName);

    lines.push("async function gt_" + name + "(test) {");
    this.addJavaScriptGroupLines(lines, 2, {
      isFunction: true,
      addTestIdlePause: true,
      useGameTestApis: true,
    });
    lines.push("}");
    lines.push(
      'registerAsync("' +
        groupName +
        '", "' +
        name +
        '", gt_' +
        name +
        ').maxTicks(4000).structureName("gametest:' +
        structureName +
        'empty");'
    );

    return lines.join("\r\n");
  }

  addJavaScriptLines(lines: string[]) {
    lines.push(AUTOGENERATED_WHOLEFILE_JS_SEPARATOR);
    lines.push("export default function " + this.name + "() {");
    this.addJavaScriptGroupLines(lines, 2, {
      isFunction: true,
    });
    lines.push("}");
  }

  addCommandLines(lines: string[]) {
    this.addCommandGroupLines(lines, 0, {});
  }
}
