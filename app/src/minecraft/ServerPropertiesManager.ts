import IFolder from "../storage/IFolder";
import { IWorldSettings } from "./IWorldSettings";
import { Difficulty, GameType } from "./WorldLevelDat";

enum ServerGameMode {
  survival = "survival",
  creative = "creative",
  adventure = "adventure",
}

enum ServerDifficulty {
  peaceful = "peaceful",
  easy = "easy",
  normal = "normal",
  hard = "hard",
}

enum ServerContentLoggingLevel {
  verbose = "verbose",
  error = "error",
  warning = "warning",
  info = "info",
}

enum ServerPermissionLevel {
  member = "member",
  visitor = "visitor",
  operator = "operator",
}

enum ServerAuthoritativeness {
  clientAuth = "client-auth",
  serverAuth = "server-auth",
  serverAuthWithRewind = "server-auth-with-rewind",
}

export default class ServerPropertiesManager {
  private _serverFolder?: IFolder;

  name: string = "Dedicated Server";
  gameMode: ServerGameMode = ServerGameMode.survival;
  forceGameMode: boolean = false;
  difficulty: ServerDifficulty = ServerDifficulty.easy;
  allowCheats: boolean = true;
  maxPlayers: number = 10;
  onlineMode: boolean = true;
  whiteList: boolean = false;
  serverPort: number = 19132;
  serverPortV6: number = 19133;
  viewDistance: number = 32;
  tickDistance: number = 4;
  playerIdleTimeout: number = 30;
  maxThreads: number = 8;
  levelName: string = "Bedrock level";
  levelSeed: string = "";
  allowInboundScriptDebugging = true;
  allowOutboundScriptDebugging = true;
  defaultPlayerPermissionLevel: ServerPermissionLevel = ServerPermissionLevel.member;
  contentLogLevel: ServerContentLoggingLevel = ServerContentLoggingLevel.verbose;
  contentLogConsoleOutputEnabled = true;
  texturePackRequired: boolean = false;
  contentLogFileEnabled: boolean = true;
  compressionThreshold: number = 1;
  serverAuthoritativeMovement: ServerAuthoritativeness = ServerAuthoritativeness.serverAuth;
  playerMovementScoreThreshold: number = 20;
  playerMovementDistanceThreshold: number = 0.3;
  playerMovementDurationThresholdInMs: number = 500;
  correctPlayerMovement: boolean = false;
  serverAuthoritativeBlockBreaking: boolean = false;

  public get serverFolder() {
    return this._serverFolder;
  }
  public set serverFolder(newFolder: IFolder | undefined) {
    this._serverFolder = newFolder;
  }

  public applyFromWorldSettings(worldSettings: IWorldSettings) {
    if (worldSettings.difficulty !== undefined) {
      switch (worldSettings.difficulty) {
        case Difficulty.easy:
          this.difficulty = ServerDifficulty.easy;
          break;
        case Difficulty.normal:
          this.difficulty = ServerDifficulty.normal;
          break;
        case Difficulty.peaceful:
          this.difficulty = ServerDifficulty.peaceful;
          break;
        case Difficulty.hard:
          this.difficulty = ServerDifficulty.hard;
          break;
      }
    }

    if (worldSettings.gameType !== undefined) {
      switch (worldSettings.gameType) {
        case GameType.survival:
          this.gameMode = ServerGameMode.survival;
          this.forceGameMode = true;
          break;
        case GameType.creative:
          this.gameMode = ServerGameMode.creative;
          this.forceGameMode = true;
          break;
        case GameType.adventure:
          this.gameMode = ServerGameMode.adventure;
          this.forceGameMode = true;
          break;
      }
    }
  }

  public async writeFile() {
    if (this._serverFolder === undefined) {
      return;
    }

    const file = this._serverFolder.ensureFile("server.properties");

    await file.loadContent(true);

    const text = file.content as string;

    // backup the server properties file if it's not generated
    if (text && text.indexOf("# Generated") < 0) {
      const now = new Date();

      const fileCopy = this._serverFolder.ensureFile(
        "server.properties." +
          now.getFullYear() +
          "." +
          (now.getMonth() + 1) +
          "." +
          now.getDate() +
          "." +
          now.getHours() +
          "." +
          now.getMinutes() +
          ".cartobackup"
      );
      fileCopy.setContent(text);

      await fileCopy.saveContent();
    }

    const content = [];

    content.push("# Generated by Minecraft Creator Tools");
    content.push("server-name=" + this.name);
    content.push("gamemode=" + this.gameMode);
    content.push("force-gamemode=" + this.forceGameMode);
    content.push("difficulty=" + this.difficulty);
    content.push("allow-cheats=" + this.allowCheats);
    content.push("max-players=" + this.maxPlayers);
    content.push("online-mode=" + this.onlineMode);
    content.push("white-list=" + this.whiteList);
    content.push("server-port=" + this.serverPort);
    content.push("server-portv6=" + this.serverPortV6);
    content.push("view-distance=" + this.viewDistance);
    content.push("tick-distance=" + this.tickDistance);
    content.push("player-idle-timeout=" + this.playerIdleTimeout);
    content.push("max-threads=" + this.maxThreads);
    content.push("level-name=" + this.levelName);
    content.push("level-seed=" + this.levelSeed);
    content.push("allow-inbound-script-debugging=" + this.allowInboundScriptDebugging);
    content.push("allow-outbound-script-debugging=" + this.allowOutboundScriptDebugging);
    content.push("default-player-permission-level=" + this.defaultPlayerPermissionLevel);
    content.push("texturepack-required=" + this.texturePackRequired);
    content.push("content-log-file-enabled=" + this.contentLogFileEnabled);
    content.push("content-log-console-output=" + this.contentLogConsoleOutputEnabled);
    content.push("content-log-level=" + this.contentLogLevel);
    content.push("compression-threshold=" + this.compressionThreshold);
    content.push("server-authoritative-movement=" + this.serverAuthoritativeMovement);
    content.push("player-movement-score-threshold=" + this.playerMovementScoreThreshold);
    content.push("player-movement-distance-threshold=" + this.playerMovementDistanceThreshold);
    content.push("player-movement-duration-threshold-in-ms=" + this.playerMovementDurationThresholdInMs);
    content.push("correct-player-movement=" + this.correctPlayerMovement);
    content.push("server-authoritative-block-breaking=" + this.serverAuthoritativeBlockBreaking);

    file.setContent(content.join("\n"));

    file.saveContent();
  }
}
