{
  "buttonPushEvent": {
    "description": "A simple button push before even See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/buttonpushaftereventsignal",
    "prefix": ["mc"],
    "body": [
      "  // set up a button on cobblestone",
      "  let cobblestone = overworld.getBlock(targetLocation);",
      "  let button = overworld.getBlock({ x: targetLocation.x, y: targetLocation.y + 1, z: targetLocation.z });",
      "",
      "  if (cobblestone === undefined || button === undefined) {    return -1;",
      "  }",
      "",
      "  cobblestone.setPermutation(mc.BlockPermutation.resolve(\"cobblestone\"));",
      "  button.setPermutation(mc.BlockPermutation.resolve(\"acacia_button\").withState(\"facing_direction\", 1 /* up */));",
      "",
      "  mc.world.afterEvents.buttonPush.subscribe((buttonPushEvent: mc.ButtonPushAfterEvent) => {",
      "    let eventLoc = buttonPushEvent.block.location;",
      "",
      "    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {    }",
      "  });"
    ]
  },
  "leverActionEvent": {
    "description": "A simple lever activate even See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/leveractionaftereventsignal",
    "prefix": ["mc"],
    "body": [
      "  // set up a lever",
      "  let cobblestone = overworld.getBlock(targetLocation);",
      "  let lever = overworld.getBlock({ x: targetLocation.x, y: targetLocation.y + 1, z: targetLocation.z });",
      "",
      "  if (cobblestone === undefined || lever === undefined) {    return -1;",
      "  }",
      "",
      "  cobblestone.setPermutation(mc.BlockPermutation.resolve(\"cobblestone\"));",
      "  lever.setPermutation(mc.BlockPermutation.resolve(\"lever\").withState(\"lever_direction\", \"up_north_south\" /* up */));",
      "",
      "  mc.world.afterEvents.leverAction.subscribe((leverActionEvent: mc.LeverActionAfterEvent) => {",
      "    let eventLoc = leverActionEvent.block.location;",
      "",
      "    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y + 1 && eventLoc.z === targetLocation.z) {        \"Lever activate event at tick \" +",
      "          mc.system.currentTick +",
      "          \" Power:\" +",
      "          leverActionEvent.block.getRedstonePower()",
      "      );",
      "    }",
      "  });"
    ]
  },
  "tripWireTripEvent": {
    "description": "A basic tripwire even See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/tripwiretripaftereventsignal",
    "prefix": ["mc"],
    "body": [
      "  // set up a tripwire",
      "  let redstone = overworld.getBlock({ x: targetLocation.x, y: targetLocation.y - 1, z: targetLocation.z });",
      "  let tripwire = overworld.getBlock(targetLocation);",
      "",
      "  if (redstone === undefined || tripwire === undefined) {    return -1;",
      "  }",
      "",
      "  redstone.setPermutation(mc.BlockPermutation.resolve(\"redstone_block\"));",
      "  tripwire.setPermutation(mc.BlockPermutation.resolve(\"tripwire\"));",
      "",
      "  mc.world.afterEvents.tripWireTrip.subscribe((tripWireTripEvent: mc.TripWireTripAfterEvent) => {",
      "    let eventLoc = tripWireTripEvent.block.location;",
      "",
      "    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {        \"Tripwire trip event at tick \" +",
      "          mc.system.currentTick +",
      "          (tripWireTripEvent.sources.length > 0 ? \" by entity \" + tripWireTripEvent.sources[0].id : \"\")",
      "      );",
      "    }",
      "  });"
    ]
  },
  "addBlockColorCube": {
    "description": "Creates a multicolored block out of different colors of wool See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/blockpermutation/resolve",
    "prefix": ["mc"],
    "body": [
      "  const allColorNames: string[] = [",
      "    \"white\",",
      "    \"orange\",",
      "    \"magenta\",",
      "    \"light_blue\",",
      "    \"yellow\",",
      "    \"lime\",",
      "    \"pink\",",
      "    \"gray\",",
      "    \"silver\",",
      "    \"cyan\",",
      "    \"purple\",",
      "    \"blue\",",
      "    \"brown\",",
      "    \"green\",",
      "    \"red\",",
      "    \"black\",",
      "  ];",
      "",
      "  const cubeDim = 7;",
      "",
      "  let colorIndex = 0;",
      "",
      "  for (let x = 0; x <= cubeDim; x++) {",
      "    for (let y = 0; y <= cubeDim; y++) {",
      "      for (let z = 0; z <= cubeDim; z++) {",
      "        colorIndex++;",
      "        overworld",
      "          .getBlock({ x: targetLocation.x + x, y: targetLocation.y + y, z: targetLocation.z + z })",
      "          ?.setPermutation(",
      "            mc.BlockPermutation.resolve(\"minecraft:wool\", {",
      "              color: allColorNames[colorIndex % allColorNames.length],",
      "            })",
      "          );",
      "      }",
      "    }",
      "  }"
    ]
  },
  "createExplosion": {
    "description": "Creates an explosion in the world See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/createexplosion",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "  overworld.createExplosion(targetLocation, 10);"
    ]
  },
  "createNoBlockExplosion": {
    "description": "Creates an explosion in the world that does not impact blocks See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/createexplosion",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "",
      "  const explodeNoBlocksLoc = {",
      "    x: Math.floor(targetLocation.x + 1),",
      "    y: Math.floor(targetLocation.y + 2),",
      "    z: Math.floor(targetLocation.z + 1)",
      "  };",
      "  overworld.createExplosion(explodeNoBlocksLoc, 15, { breaksBlocks: false });"
    ]
  },
  "createFireAndWaterExplosions": {
    "description": "Creates a fire explosion and an underwater explosion in the world See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/createexplosion",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "",
      "  const explosionLoc = { x: targetLocation.x + 0.5, y: targetLocation.y + 0.5, z: targetLocation.z + 0.5};",
      "  overworld.createExplosion(explosionLoc, 15, { causesFire: true });",
      "",
      "  const belowWaterLoc = { x: targetLocation.x + 3, y: targetLocation.y + 1,z: targetLocation.z + 3};",
      "  overworld.createExplosion(belowWaterLoc, 10, { allowUnderwater: true });"
    ]
  },
  "itemStacks": {
    "description": "Creates free-floating item stacks in the world See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/itemstack",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "",
      "  const oneItemLoc = { x: targetLocation.x + targetLocation.y + 3, y: 2, z: targetLocation.z + 1 };",
      "  const fiveItemsLoc = { x: targetLocation.x + 1, y: targetLocation.y + 2, z: targetLocation.z + 1 };",
      "  const diamondPickaxeLoc = { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 4 };",
      "",
      "  const oneEmerald = new mc.ItemStack(\"minecraft:emerald\", 1);",
      "  const onePickaxe = new mc.ItemStack(\"minecraft:diamond_pickaxe\", 1);",
      "  const fiveEmeralds = new mc.ItemStack(\"minecraft:emerald\", 5);",
      "  overworld.spawnItem(oneEmerald, oneItemLoc);",
      "  overworld.spawnItem(fiveEmeralds, fiveItemsLoc);",
      "  overworld.spawnItem(onePickaxe, diamondPickaxeLoc);"
    ]
  },
  "diamondAwesomeSword": {
    "description": "Creates a sword with custom lore See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/itemstack",
    "prefix": ["mc"],
    "body": [
      "  const diamondAwesomeSword = new mc.ItemStack(\"minecraft:diamond_sword\", 1);",
      "  const players = mc.world.getAllPlayers();",
      "",
      "  // hover over/select the item in your inventory to see the lore.",
      "  diamondAwesomeSword.setLore([\"§c§lDiamond Sword of Awesome§r\", \"+10 coolness\", \"§p+4 shiny§r\"]);",
      "  ",
      "  const enchants = diamondAwesomeSword.getComponent(\"minecraft:enchantments\") as mc.ItemEnchantsComponent;",
      "  const enchantments = enchants.enchantments;",
      "",
      "  const knockbackEnchant = new mc.Enchantment(\"knockback\", 3);",
      "  enchantments.addEnchantment(knockbackEnchant);",
      "",
      "  enchants.enchantments = enchantments;",
      "",
      "  const inventory = players[0].getComponent(\"inventory\") as mc.EntityInventoryComponent;",
      "  inventory.container.setItem(0, diamondAwesomeSword);"
    ]
  },
  "ironFireSword": {
    "description": "Creates a sword with fire effects See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/itemstack",
    "prefix": ["mc"],
    "body": [
      "  const ironFireSword = new mc.ItemStack(\"minecraft:iron_sword\", 1);",
      "  const players = mc.world.getAllPlayers();",
      "",
      "  const fireAspectEnchant = new mc.Enchantment(\"fire_aspect\", 3);",
      "  const enchants = ironFireSword.getComponent(\"minecraft:enchantments\") as mc.ItemEnchantsComponent;",
      "  const enchantments = enchants.enchantments;",
      "",
      "  const addedFire = enchantments.addEnchantment(fireAspectEnchant);",
      "",
      "  enchants.enchantments = enchantments;",
      "",
      "  if (!addedFire) {    return -1;",
      "  }",
      "",
      "  const inventory = players[0].getComponent(\"inventory\") as mc.EntityInventoryComponent;",
      "  inventory.container.setItem(0, ironFireSword);"
    ]
  },
  "quickFoxLazyDog": {
    "description": "Creates a fox and, well, a wolf with effects applied See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/spawnentity",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "",
      "  const fox = overworld.spawnEntity(\"minecraft:fox\", {",
      "    x: targetLocation.x + 1,",
      "    y: targetLocation.y + 2,",
      "    z: targetLocation.z + 3,",
      "  });",
      "",
      "  fox.addEffect(\"speed\", 10, {",
      "    amplifier: 2,",
      "  });",
      "  const wolf = overworld.spawnEntity(\"minecraft:wolf\", {",
      "    x: targetLocation.x + 4,",
      "    y: targetLocation.y + 2,",
      "    z: targetLocation.z + 3,",
      "  });",
      "  wolf.addEffect(\"slowness\", 10, {",
      "    amplifier: 2,",
      "  });",
      "  wolf.isSneaking = true;"
    ]
  },
  "incrementProperty": {
    "description": "Increments a dynamic numeric persisted property See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/world/getdynamicproperty",
    "prefix": ["mc"],
    "body": [
      "  let number = mc.world.getDynamicProperty(\"samplelibrary:number\");",
      "",
      "  if (number === undefined) {",
      "    number = 0;",
      "  }",
      "",
      "  if (typeof number !== \"number\") {    return -1;",
      "  }",
      "",
      "  mc.world.setDynamicProperty(\"samplelibrary:number\", number + 1);"
    ]
  },
  "incrementPropertyInJsonBlob": {
    "description": "Increments a dynamic numeric persisted property See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/world/getdynamicproperty",
    "prefix": ["mc"],
    "body": [
      "  let paintStr = mc.world.getDynamicProperty(\"samplelibrary:longerjson\");",
      "  let paint: { color: string; intensity: number } | undefined = undefined;",
      "",
      "  if (paintStr === undefined) {",
      "    paint = {",
      "      color: \"purple\",",
      "      intensity: 0,",
      "    };",
      "  } else {",
      "    if (typeof paintStr !== \"string\") {      return -1;",
      "    }",
      "",
      "    try {",
      "      paint = JSON.parse(paintStr);",
      "    } catch (e) {      return -1;",
      "    }",
      "  }",
      "",
      "  if (!paint) {    return -1;",
      "  }",
      "",
      "  paint.intensity++;",
      "  paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits",
      "  mc.world.setDynamicProperty(\"samplelibrary:longerjson\", paintStr);"
    ]
  },
  "triggerEvent": {
    "description": "Creates a creeper and then triggers an explosion See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/spawnentity",
    "prefix": ["mc"],
    "body": [
      "  const creeper = overworld.spawnEntity(\"minecraft:creeper\", targetLocation);",
      "",
      "  creeper.triggerEvent(\"minecraft:start_exploding_forced\");"
    ]
  },
  "applyImpulse": {
    "description": "Creates a zombie and then applies an impulse See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entity/applyimpulse",
    "prefix": ["mc"],
    "body": [
      "  const zombie = overworld.spawnEntity(\"minecraft:zombie\", targetLocation);",
      "",
      "  zombie.clearVelocity();",
      "",
      "  // throw the zombie up in the air",
      "  zombie.applyImpulse({ x: 0, y: 0.5, z: 0 });"
    ]
  },
  "getFireworkVelocity": {
    "description": "Gets a velocity of a firework See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entity/getvelocity",
    "prefix": ["mc"],
    "body": [
      "  const fireworkRocket = overworld.spawnEntity(\"minecraft:fireworks_rocket\", targetLocation);",
      "",
      "  mc.system.runTimeout(() => {",
      "    let velocity = fireworkRocket.getVelocity();",
      "  }, 5);"
    ]
  },
  "applyDamageThenHeal": {
    "description": "Applies damage then heals an entity See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entity/applydamage",
    "prefix": ["mc"],
    "body": [
      "  const skelly = overworld.spawnEntity(\"minecraft:skeleton\", targetLocation);",
      "",
      "  skelly.applyDamage(19); // skeletons have max damage of 20 so this is a near-death skeleton",
      "",
      "  mc.system.runTimeout(() => {",
      "    let health = skelly.getComponent(\"health\") as mc.EntityHealthComponent;    health.resetToMaxValue();  }, 20);"
    ]
  },
  "setOnFire": {
    "description": "Applies damage then heals an entity See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entity/setonfire",
    "prefix": ["mc"],
    "body": [
      "  const skelly = overworld.spawnEntity(\"minecraft:skeleton\", targetLocation);",
      "",
      "  skelly.setOnFire(20, true);",
      "",
      "  mc.system.runTimeout(() => {",
      "    let onfire = skelly.getComponent(\"onfire\") as mc.EntityOnFireComponent;",
      "    skelly.extinguishFire(true);  }, 20);"
    ]
  },
  "teleport": {
    "description": "Does a basic teleport action See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entity/teleport",
    "prefix": ["mc"],
    "body": [
      "  const cow = overworld.spawnEntity(\"minecraft:cow\", targetLocation);",
      "",
      "  mc.system.runTimeout(() => {",
      "    cow.teleport(",
      "      { x: targetLocation.x + 2, y: targetLocation.y + 2, z: targetLocation.z + 2 },",
      "      {",
      "        facingLocation: targetLocation,",
      "      }",
      "    );",
      "  }, 20);"
    ]
  },
  "teleportMovement": {
    "description": "Does a basic movements with frequent teleport actions See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entity/teleport",
    "prefix": ["mc"],
    "body": [
      "  const pig = overworld.spawnEntity(\"minecraft:pig\", targetLocation);",
      "",
      "  let inc = 1;",
      "  let runId = mc.system.runInterval(() => {",
      "    pig.teleport(",
      "      { x: targetLocation.x + inc / 4, y: targetLocation.y + inc / 4, z: targetLocation.z + inc / 4 },",
      "      {",
      "        facingLocation: targetLocation,",
      "      }",
      "    );",
      "",
      "    if (inc > 100) {",
      "      mc.system.clearRun(runId);",
      "    }",
      "    inc++;",
      "  }, 4);"
    ]
  },
  "bounceSkeletons": {
    "description": "Amongst a set of entities, uses entity query to find specific entities and bounce them with applyKnockback See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/getentities",
    "prefix": ["mc"],
    "body": [
      "  let mobs = [\"creeper\", \"skeleton\", \"sheep\"];",
      "",
      "  // create some sample mob data",
      "  for (let i = 0; i < 10; i++) {",
      "    overworld.spawnEntity(mobs[i % mobs.length], targetLocation);",
      "  }",
      "",
      "  let eqo: mc.EntityQueryOptions = {",
      "    type: \"skeleton\",",
      "  };",
      "",
      "  for (let entity of overworld.getEntities(eqo)) {",
      "    entity.applyKnockback(0, 0, 0, 1);",
      "  }"
    ]
  },
  "tagsQuery": {
    "description": "Amongst a set of entities, uses entity query to find specific entities based on a tag See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/getentities",
    "prefix": ["mc"],
    "body": [
      "  let mobs = [\"creeper\", \"skeleton\", \"sheep\"];",
      "",
      "  // create some sample mob data",
      "  for (let i = 0; i < 10; i++) {",
      "    let mobTypeId = mobs[i % mobs.length];",
      "    let entity = overworld.spawnEntity(mobTypeId, targetLocation);",
      "    entity.addTag(\"mobparty.\" + mobTypeId);",
      "  }",
      "",
      "  let eqo: mc.EntityQueryOptions = {",
      "    tags: [\"mobparty.skeleton\"],",
      "  };",
      "",
      "  for (let entity of overworld.getEntities(eqo)) {",
      "    entity.kill();",
      "  }"
    ]
  },
  "runEntitySpawnEvent": {
    "description": "Registers and contains an entity spawned event handler See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entityspawnaftereventsignal/subscribe",
    "prefix": ["mc"],
    "body": [
      "  // register a new function that is called when a new entity is created.",
      "  mc.world.afterEvents.entitySpawn.subscribe((entityEvent: mc.EntitySpawnAfterEvent) => {",
      "    if (entityEvent && entityEvent.entity) {    } else {    }",
      "  });",
      "",
      "  mc.system.runTimeout(() => {",
      "    createOldHorse(log, targetLocation);",
      "  }, 20);"
    ]
  },
  "createOldHorse": {
    "description": "A simple function to create a horse See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/spawnentity",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "  overworld.spawnEntity(\"minecraft:horse<minecraft:ageable_grow_up>\", { x: targetLocation.x, y: targetLocation.y + 1, z: targetLocation.z});"
    ]
  },
  "givePlayerElytra": {
    "description": "Give a player elytra See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entityequipmentinventorycomponent",
    "prefix": ["mc"],
    "body": [
      "  let players = mc.world.getAllPlayers();",
      "",
      "  const equipment = players[0].getComponent(\"equippable\") as mc.EntityEquippableComponent;",
      "  equipment.setEquipment(mc.EquipmentSlot.Chest, new mc.ItemStack(\"minecraft:elytra\"));",
      ""
    ]
  },
  "givePlayerEquipment": {
    "description": "Give a player, and an armorstand, a full set of equipment See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/itemstack",
    "prefix": ["mc"],
    "body": [
      "  let players = mc.world.getAllPlayers();",
      "",
      "  const armorStandLoc = { x: targetLocation.x, y: targetLocation.y, z: targetLocation.z + 4 };",
      "  let armorStand = players[0].dimension.spawnEntity(\"armor_stand\", armorStandLoc);",
      "",
      "  const equipmentCompPlayer = players[0].getComponent(\"equippable\") as mc.EntityEquippableComponent;",
      "  equipmentCompPlayer.setEquipment(mc.EquipmentSlot.Head, new mc.ItemStack(\"minecraft:golden_helmet\"));",
      "  equipmentCompPlayer.setEquipment(mc.EquipmentSlot.Chest, new mc.ItemStack(\"minecraft:iron_chestplate\"));",
      "  equipmentCompPlayer.setEquipment(mc.EquipmentSlot.Legs, new mc.ItemStack(\"minecraft:diamond_leggings\"));",
      "  equipmentCompPlayer.setEquipment(mc.EquipmentSlot.Feet, new mc.ItemStack(\"minecraft:netherite_boots\"));",
      "  equipmentCompPlayer.setEquipment(mc.EquipmentSlot.Mainhand, new mc.ItemStack(\"minecraft:wooden_sword\"));",
      "  equipmentCompPlayer.setEquipment(mc.EquipmentSlot.Offhand, new mc.ItemStack(\"minecraft:shield\"));",
      "",
      "  const equipmentCompArmorStand = armorStand.getComponent(",
      "    \"equippable\"",
      "  ) as mc.EntityEquippableComponent;",
      "  equipmentCompArmorStand.setEquipment(mc.EquipmentSlot.Head, new mc.ItemStack(\"minecraft:golden_helmet\"));",
      "  equipmentCompArmorStand.setEquipment(mc.EquipmentSlot.Chest, new mc.ItemStack(\"minecraft:iron_chestplate\"));",
      "  equipmentCompArmorStand.setEquipment(mc.EquipmentSlot.Legs, new mc.ItemStack(\"minecraft:diamond_leggings\"));",
      "  equipmentCompArmorStand.setEquipment(mc.EquipmentSlot.Feet, new mc.ItemStack(\"minecraft:netherite_boots\"));",
      "  equipmentCompArmorStand.setEquipment(mc.EquipmentSlot.Mainhand, new mc.ItemStack(\"minecraft:wooden_sword\"));",
      "  equipmentCompArmorStand.setEquipment(mc.EquipmentSlot.Offhand, new mc.ItemStack(\"minecraft:shield\"));"
    ]
  },
  "playMusicAndSound": {
    "description": "Plays some music and sound effects See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/world/playmusic",
    "prefix": ["mc"],
    "body": [
      "  let players = mc.world.getPlayers();",
      "",
      "  const musicOptions: mc.MusicOptions = {",
      "    fade: 0.5,",
      "    loop: true,",
      "    volume: 1.0,",
      "  };",
      "  mc.world.playMusic(\"music.menu\", musicOptions);",
      "",
      "  const worldSoundOptions: mc.WorldSoundOptions = {",
      "    pitch: 0.5,",
      "    volume: 4.0,",
      "  };",
      "  mc.world.playSound(\"ambient.weather.thunder\", targetLocation, worldSoundOptions);",
      "",
      "  const playerSoundOptions: mc.PlayerSoundOptions = {",
      "    pitch: 1.0,",
      "    volume: 1.0,",
      "  };",
      "",
      "  players[0].playSound(\"bucket.fill_water\", playerSoundOptions);"
    ]
  },
  "spawnParticle": {
    "description": "Spawns a cloud of colored flame particles See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/dimension/spawnparticle",
    "prefix": ["mc"],
    "body": [
      "  for (let i = 0; i < 100; i++) {",
      "    const molang = new mc.MolangVariableMap();",
      "",
      "    molang.setColorRGB(\"variable.color\", { red: Math.random(), green: Math.random(), blue: Math.random() });",
      "",
      "    let newLocation = {",
      "      x: targetLocation.x + Math.floor(Math.random() * 8) - 4,",
      "      y: targetLocation.y + Math.floor(Math.random() * 8) - 4,",
      "      z: targetLocation.z + Math.floor(Math.random() * 8) - 4,",
      "    };",
      "    overworld.spawnParticle(\"minecraft:colored_flame_particle\", newLocation, molang);",
      "  }"
    ]
  },
  "pistonBeforeEvent": {
    "description": "A simple piston before activate even See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/pistonactivatebeforeeventsignal/subscribe",
    "prefix": ["mc"],
    "body": [
      "  // set up a couple of piston blocks",
      "  let piston = overworld.getBlock(targetLocation);",
      "  let button = overworld.getBlock({ x: targetLocation.x, y: targetLocation.y + 1, z: targetLocation.z });",
      "",
      "  if (piston === undefined || button === undefined) {    return -1;",
      "  }",
      "",
      "  piston.setPermutation(mc.BlockPermutation.resolve(\"piston\").withState(\"facing_direction\", 3));",
      "  button.setPermutation(mc.BlockPermutation.resolve(\"acacia_button\").withState(\"facing_direction\", 1));",
      "",
      "  const uncanceledPistonLoc = {",
      "    x: Math.floor(targetLocation.x) + 2,",
      "    y: Math.floor(targetLocation.y),",
      "    z: Math.floor(targetLocation.z) + 2,",
      "  };",
      "",
      "  // this is our control.",
      "  let uncanceledPiston = overworld.getBlock(uncanceledPistonLoc);",
      "  let uncanceledButton = overworld.getBlock({",
      "    x: uncanceledPistonLoc.x,",
      "    y: uncanceledPistonLoc.y + 1,",
      "    z: uncanceledPistonLoc.z,",
      "  });",
      "",
      "  if (uncanceledPiston === undefined || uncanceledButton === undefined) {    return -1;",
      "  }",
      "",
      "  uncanceledPiston.setPermutation(mc.BlockPermutation.resolve(\"piston\").withState(\"facing_direction\", 3));",
      "  uncanceledButton.setPermutation(",
      "    mc.BlockPermutation.resolve(\"acacia_button\").withState(\"facing_direction\", 1)",
      "  );",
      "",
      "  mc.world.beforeEvents.pistonActivate.subscribe((pistonEvent: mc.PistonActivateBeforeEvent) => {",
      "    let eventLoc = pistonEvent.piston.block.location;",
      "    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {      pistonEvent.cancel = true;",
      "    }",
      "  });"
    ]
  },
  "pistonAfterEvent": {
    "description": "A simple piston before activate even See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/pistonactivateaftereventsignal/subscribe",
    "prefix": ["mc"],
    "body": [
      "  // set up a couple of piston blocks",
      "  let piston = overworld.getBlock(targetLocation);",
      "  let button = overworld.getBlock({ x: targetLocation.x, y: targetLocation.y + 1, z: targetLocation.z });",
      "",
      "  if (piston === undefined || button === undefined) {    return -1;",
      "  }",
      "",
      "  piston.setPermutation(mc.BlockPermutation.resolve(\"piston\").withState(\"facing_direction\", 3));",
      "  button.setPermutation(mc.BlockPermutation.resolve(\"acacia_button\").withState(\"facing_direction\", 1));",
      "",
      "  mc.world.afterEvents.pistonActivate.subscribe((pistonEvent: mc.PistonActivateAfterEvent) => {",
      "    let eventLoc = pistonEvent.piston.block.location;",
      "",
      "    if (eventLoc.x === targetLocation.x && eventLoc.y === targetLocation.y && eventLoc.z === targetLocation.z) {        \"Piston event at \" +",
      "          mc.system.currentTick +",
      "          (pistonEvent.piston.isMoving ? \" Moving\" : \"\") +",
      "          (pistonEvent.piston.isExpanding ? \" Expanding\" : \"\") +",
      "          (pistonEvent.piston.isExpanded ? \" Expanded\" : \"\") +",
      "          (pistonEvent.piston.isRetracting ? \" Retracting\" : \"\") +",
      "          (pistonEvent.piston.isRetracted ? \" Retracted\" : \"\")",
      "      );",
      "    }",
      "  });"
    ]
  },
  "updateScoreboard": {
    "description": "Creates and updates a scoreboard objective, plus a player score See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/scoreboard",
    "prefix": ["mc"],
    "body": [
      "  const scoreboardObjectiveId = \"scoreboard_demo_objective\";",
      "  const scoreboardObjectiveDisplayName = \"Demo Objective\";",
      "",
      "  let players = mc.world.getPlayers();",
      "",
      "  // Ensure a new objective.",
      "  let objective = mc.world.scoreboard.getObjective(scoreboardObjectiveId);",
      "",
      "  if (!objective) {",
      "    objective = mc.world.scoreboard.addObjective(scoreboardObjectiveId, scoreboardObjectiveDisplayName);",
      "  }",
      "",
      "  // get the scoreboard identity for player 0",
      "  let player0Identity = players[0].scoreboardIdentity;",
      "",
      "  if (player0Identity === undefined) {    return -1;",
      "  }",
      "",
      "  // initialize player score to 100;",
      "  objective.setScore(player0Identity, 100);",
      "",
      "  mc.world.scoreboard.setObjectiveAtDisplaySlot(mc.DisplaySlotId.Sidebar, {",
      "    objective: objective,",
      "    sortOrder: mc.ObjectiveSortOrder.Descending,",
      "  });",
      "",
      "  const playerScore = objective.getScore(player0Identity) ?? 0;",
      "",
      "  // score should now be 110.",
      "  objective.setScore(player0Identity, playerScore + 10);"
    ]
  },
  "setTitle": {
    "description": "Sets a title overlay on the player's scree See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/screendisplay",
    "prefix": ["mc"],
    "body": [
      "  let players = mc.world.getPlayers();",
      "",
      "  players[0].onScreenDisplay.setTitle(\"§o§6Fancy Title§r\");"
    ]
  },
  "setTitleAndSubtitle": {
    "description": "Sets a title and subtitle overlay on the player's scree See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/screendisplay",
    "prefix": ["mc"],
    "body": [
      "  let players = mc.world.getPlayers();",
      "",
      "  players[0].onScreenDisplay.setTitle(\"Chapter 1\", {",
      "    stayDuration: 100,",
      "    fadeInDuration: 2,",
      "    fadeOutDuration: 4,",
      "    subtitle: \"Trouble in Block Town\",",
      "  });"
    ]
  },
  "countdown": {
    "description": "Runs a countdown from 10 to 0 See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/screendisplay",
    "prefix": ["mc"],
    "body": [
      "  let players = mc.world.getPlayers();",
      "",
      "  players[0].onScreenDisplay.setTitle(\"Get ready!\", {",
      "    stayDuration: 220,",
      "    fadeInDuration: 2,",
      "    fadeOutDuration: 4,",
      "    subtitle: \"10\",",
      "  });",
      "",
      "  let countdown = 10;",
      "",
      "  let intervalId = mc.system.runInterval(() => {",
      "    countdown--;",
      "    players[0].onScreenDisplay.updateSubtitle(countdown.toString());",
      "",
      "    if (countdown == 0) {",
      "      mc.system.clearRun(intervalId);",
      "    }",
      "  }, 20);"
    ]
  },
  "sendBasicMessage": {
    "description": "Sends a basic message See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/player/sendmessage",
    "prefix": ["mc"],
    "body": ["  let players = mc.world.getPlayers();", "", "  players[0].sendMessage(\"Hello World!\");"]
  },
  "sendTranslatedMessage": {
    "description": "Sends a translated message See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/player/sendmessage",
    "prefix": ["mc"],
    "body": [
      "  let players = mc.world.getPlayers();",
      "",
      "  players[0].sendMessage({ translate: \"authentication.welcome\", with: [\"Amazing Player 1\"] });"
    ]
  },
  "showTranslatedMessageForm": {
    "description": "Shows an example translated two-button dialog dialog See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/rawmessage",
    "prefix": ["mc"],
    "body": [
      "  const players = mc.world.getPlayers();",
      "",
      "  const messageForm = new mcui.MessageFormData()",
      "    .title({ translate: \"permissions.removeplayer\" })",
      "    .body({ translate: \"accessibility.list.or.two\", with: [\"Player 1\", \"Player 2\"] })",
      "    .button1(\"Player 1\")",
      "    .button2(\"Player 2\");",
      "",
      "  messageForm",
      "    .show(players[0])",
      "    .then((formData: mcui.MessageFormResponse) => {",
      "      // player canceled the form, or another dialog was up and open.",
      "      if (formData.canceled || formData.selection === undefined) {",
      "        return;",
      "      }",
      "    })",
      "    .catch((error: Error) => {      return -1;",
      "    });"
    ]
  },
  "addSign": {
    "description": "Creates a single-sided simple sig See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/blocksigncomponent",
    "prefix": ["mc"],
    "body": [
      "  const players = mc.world.getPlayers();",
      "",
      "  const dim = players[0].dimension;",
      "",
      "  const signBlock = dim.getBlock(targetLocation);",
      "",
      "  if (!signBlock) {    return -1;",
      "  }",
      "  let signPerm = mc.BlockPermutation.resolve(\"minecraft:standing_sign\", { ground_sign_direction: 8 });",
      "",
      "  signBlock.setPermutation(signPerm);",
      "",
      "  const signComponent = signBlock.getComponent(\"minecraft:sign\") as mc.BlockSignComponent;",
      "",
      "  signComponent.setText(`Basic sign!\nThis is green on the front.`);"
    ]
  },
  "addTranslatedSign": {
    "description": "Creates a single-sided simple sig See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/blockpermutation",
    "prefix": ["mc"],
    "body": [
      "  const players = mc.world.getPlayers();",
      "",
      "  const dim = players[0].dimension;",
      "",
      "  const signBlock = dim.getBlock(targetLocation);",
      "",
      "  if (!signBlock) {    return -1;",
      "  }",
      "  let signPerm = mc.BlockPermutation.resolve(\"minecraft:standing_sign\", { ground_sign_direction: 8 });",
      "",
      "  signBlock.setPermutation(signPerm);",
      "",
      "  const signComponent = signBlock.getComponent(\"minecraft:sign\") as mc.BlockSignComponent;",
      "",
      "  signComponent.setText({ translate: \"item.skull.player.name\", with: [players[0].name] });"
    ]
  },
  "addTwoSidedSign": {
    "description": "Creates a two-sided sign with custom colors and a read-only status See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/blocksigncomponent",
    "prefix": ["mc"],
    "body": [
      "  const players = mc.world.getPlayers();",
      "",
      "  const dim = players[0].dimension;",
      "",
      "  const signBlock = dim.getBlock(targetLocation);",
      "",
      "  if (!signBlock) {    return -1;",
      "  }",
      "  let signPerm = mc.BlockPermutation.resolve(\"minecraft:standing_sign\", { ground_sign_direction: 8 });",
      "",
      "  signBlock.setPermutation(signPerm);",
      "",
      "  const signComponent = signBlock.getComponent(\"minecraft:sign\") as mc.BlockSignComponent;",
      "",
      "  signComponent.setText(`Party Sign!\nThis is green on the front.`);",
      "  signComponent.setText(`Party Sign!\nThis is red on the back.`, mc.SignSide.Back);",
      "  signComponent.setTextDyeColor(mc.DyeColor.Green);",
      "  signComponent.setTextDyeColor(mc.DyeColor.Red, mc.SignSide.Back);",
      "",
      "  // players cannot edit sign!",
      "  signComponent.setWaxed();"
    ]
  },
  "spawnItem": {
    "description": "Creates a free-floating feather item in the world See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/itemstack",
    "prefix": ["mc"],
    "body": [
      "  const featherItem = new mc.ItemStack(\"minecraft:feather\", 1);",
      "",
      "  overworld.spawnItem(featherItem, targetLocation);"
    ]
  },
  "testThatEntityIsFeatherItem": {
    "description": "Tests whether there is a feather nearby a spot See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/entityitemcomponent",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "",
      "  const items = overworld.getEntities({",
      "    location: targetLocation,",
      "    maxDistance: 20,",
      "  });",
      "",
      "  for (const item of items) {",
      "    const itemComp = item.getComponent(\"item\") as mc.EntityItemComponent;",
      "",
      "    if (itemComp) {",
      "      if (itemComp.itemStack.typeId.endsWith(\"feather\")) {      }",
      "    }",
      "  }"
    ]
  },
  "trapTick": {
    "description": "A simple tick timer that runs a command every minute See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/system/run",
    "prefix": ["mc"],
    "body": [
      "  const overworld = mc.world.getDimension(\"overworld\");",
      "",
      "  try {",
      "    // Minecraft runs at 20 ticks per second.",
      "    if (mc.system.currentTick % 1200 === 0) {",
      "      mc.world.sendMessage(\"Another minute passes...\");",
      "    }",
      "  } catch (e) {",
      "    console.warn(\"Error: \" + e);",
      "  }",
      "",
      "  mc.system.run(trapTick);"
    ]
  },
  "every30Seconds": {
    "description": "An alternate interval timer that runs a command every 30 seconds See https://learn.microsoft.com/minecraft/creator/scriptapi/minecraft/server/system/runinterval",
    "prefix": ["mc"],
    "body": [
      "  let intervalRunIdentifier = Math.floor(Math.random() * 10000);",
      "",
      "  mc.system.runInterval(() => {",
      "    mc.world.sendMessage(\"This is an interval run \" + intervalRunIdentifier + \" sending a message every 30 seconds.\");",
      "  }, 600);"
    ]
  }
}
